{"version":3,"sources":["InputTextBox.tsx","ReadOnlyTextBox.tsx","SimpleButton.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["InputTextBox","props","className","value","placeholder","onChange","inputEventHandler","ReadOnlyTextBox","class","readOnly","formattedSql","wrap","SimpleButton","buttonClass","type","onClick","onClickEventHandler","tooltip","buttonText","copyTextToClipBoard","target","divTemp","document","createElement","appendChild","textContent","body","selection","getSelection","selectAllChildren","execCommand","removeChild","App","useState","inputSql","setInputSql","setFormattedSql","minifiedSql","setMinifiedSql","e","input","format","pd","sqlmin","_","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","basename","process","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6VAwBeA,MAbf,SAAsBC,GACpB,OACE,qBAAKC,UAAU,eAAf,SACE,0BACEA,UAAU,MACVC,MAAOF,EAAME,MACbC,YAAaH,EAAMG,YACnBC,SAAUJ,EAAMK,uB,MCMTC,MAdf,SAAyBN,GACvB,OACE,qBAAKC,UAAW,WAAaD,EAAMO,MAAnC,SACE,0BACEN,UAAU,MACVO,UAAU,EACVL,YAAaH,EAAMG,YACnBD,MAAOF,EAAMS,aACbC,KAAMV,EAAMU,U,kBCSLC,MAff,SAAsBX,GACpB,OACE,qBAAKC,UAAU,qBAAf,SACE,wBACEA,UAAW,UAAYD,EAAMY,YAC7BC,KAAK,SACLC,QAASd,EAAMe,oBACf,eAAcf,EAAMgB,QAJtB,SAMGhB,EAAMiB,gBCsEf,SAASC,EAAoBC,GAC3B,IAAMC,EAAUC,SAASC,cAAc,OACvCF,EAAQG,YAAYF,SAASC,cAAc,QAAQE,YAAcL,EAEjEE,SAASI,KAAKF,YAAYH,GAC1B,IAAMM,EAAYL,SAASM,eACV,MAAbD,GACFA,EAAUE,kBAAkBR,GAE9BC,SAASQ,YAAY,QAErBR,SAASI,KAAKK,YAAYV,GAEbW,MA9Ff,WACE,MAAgCC,mBAAS,IAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAwCF,mBAAS,IAAjD,mBAAOvB,EAAP,KAAqB0B,EAArB,KACA,EAAsCH,mBAAS,IAA/C,mBAAOI,EAAP,KAAoBC,EAApB,KAYA,OACE,sBAAKpC,UAAU,MAAf,UACE,wBAAQA,UAAU,iCAAlB,SACE,qBAAKA,UAAU,qDAAf,6BAIF,sBAAKA,UAAU,WAAf,UACE,qBAAKA,UAAU,aAAf,SACE,cAAC,EAAD,CACEC,MAAO+B,EACP9B,YAAY,mBACZE,kBAtBM,SAACiC,GACf,IAAMC,EAAQD,EAAEnB,OAAOjB,MACjBO,EAAe+B,iBAAOF,EAAEnB,OAAOjB,OACrCgC,EAAYK,GACZJ,EAAgB1B,GAChB4B,EAAeI,KAAGC,OAAOjC,SAoBrB,sBAAKR,UAAU,eAAf,UACE,sBAAKA,UAAU,iBAAf,UACE,sBAAKA,UAAU,cAAf,UACE,qBAAKA,UAAU,iBAAf,SACE,cAAC,EAAD,CACEW,YAAY,mDACZK,WAAW,OACXF,oBAzBS,SAAC4B,GAAD,OAAYzB,EAAoBT,IA0BzCO,QAAQ,8CAGZ,qBAAKf,UAAU,iBAAf,SACE,cAAC,EAAD,CACEW,YAAY,mDACZK,WAAW,KACXF,oBA/Be,SAAC4B,GAAD,OAAYT,EAAYzB,IAgCvCO,QAAQ,oDAId,qBAAKf,UAAU,YAAf,SACE,cAAC,EAAD,CACEE,YAAY,sCACZM,aAAcA,SAIpB,sBAAKR,UAAU,gBAAf,UACE,qBAAKA,UAAU,cAAf,SACE,cAAC,EAAD,CACEW,YAAY,mDACZK,WAAW,OACXF,oBAjDU,SAAC4B,GAAD,OAAYzB,EAAoBkB,IAkD1CpB,QAAQ,6CAGZ,qBAAKf,UAAU,YAAf,SACE,cAAC,EAAD,CACEE,YAAY,qCACZM,aAAc2B,EACd1B,KAAK,MACLH,MAAM,6BCrEFqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,eAAC,IAAMC,WAAP,WAEI,cAAC,IAAD,CAAeC,SAAUC,sDAE3B,cAAC,EAAD,OAEFhC,SAASiC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.fcf16347.chunk.js","sourcesContent":["import React from 'react';\nimport './InputTextBox.scss';\n\ntype InputTextBoxProps = {\n  readonly placeholder: string;\n  readonly value?: string;\n  readonly inputEventHandler: (\n    event: React.ChangeEvent<HTMLTextAreaElement>\n  ) => void;\n};\n\nfunction InputTextBox(props: InputTextBoxProps) {\n  return (\n    <div className=\"InputTextBox\">\n      <textarea\n        className=\"box\"\n        value={props.value}\n        placeholder={props.placeholder}\n        onChange={props.inputEventHandler}\n      />\n    </div>\n  );\n}\n\nexport default InputTextBox;\n","import React from 'react';\nimport './ReadOnlyTextBox.scss';\n\ntype ReadOnlyTextBoxProps = {\n  readonly placeholder: string;\n  readonly formattedSql: string;\n  readonly wrap?: string;\n  readonly class?: string;\n};\n\nfunction ReadOnlyTextBox(props: ReadOnlyTextBoxProps) {\n  return (\n    <div className={'TextBox ' + props.class}>\n      <textarea\n        className=\"box\"\n        readOnly={true}\n        placeholder={props.placeholder}\n        value={props.formattedSql}\n        wrap={props.wrap}\n      />\n    </div>\n  );\n}\n\nexport default ReadOnlyTextBox;\n","import React from 'react';\nimport './bulma.scss';\nimport './SimpleButton.scss';\n\ntype SimpleButtonProps = {\n  readonly buttonText: string;\n  readonly onClickEventHandler: (\n    event: React.MouseEvent<HTMLButtonElement>\n  ) => void;\n  readonly buttonClass?: string;\n  readonly tooltip?: string;\n};\nfunction SimpleButton(props: SimpleButtonProps) {\n  return (\n    <div className=\"simple-button-area\">\n      <button\n        className={'button ' + props.buttonClass}\n        type=\"button\"\n        onClick={props.onClickEventHandler}\n        data-tooltip={props.tooltip}\n      >\n        {props.buttonText}\n      </button>\n    </div>\n  );\n}\n\nexport default SimpleButton;\n","import { pd } from 'pretty-data';\nimport React, { useState } from 'react';\nimport { format } from 'sql-formatter';\nimport InputTextBox from './InputTextBox';\nimport ReadOnlyTextBox from './ReadOnlyTextBox';\n\nimport './App.scss';\nimport './bulma.scss';\nimport SimpleButton from './SimpleButton';\n\nfunction App() {\n  const [inputSql, setInputSql] = useState('');\n  const [formattedSql, setFormattedSql] = useState('');\n  const [minifiedSql, setMinifiedSql] = useState('');\n\n  const onInput = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    const input = e.target.value;\n    const formattedSql = format(e.target.value);\n    setInputSql(input);\n    setFormattedSql(formattedSql);\n    setMinifiedSql(pd.sqlmin(formattedSql));\n  };\n  const copyFormattedSql = (_: any) => copyTextToClipBoard(formattedSql);\n  const copyMinifiedSql = (_: any) => copyTextToClipBoard(minifiedSql);\n  const updateInputByFormatted = (_: any) => setInputSql(formattedSql);\n  return (\n    <div className=\"App\">\n      <header className=\"App-header has-background-info\">\n        <div className=\"title is-3 has-text-white-ter has-text-weight-bold\">\n          SQL Formatter\n        </div>\n      </header>\n      <div className=\"App-main\">\n        <div className=\"input-area\">\n          <InputTextBox\n            value={inputSql}\n            placeholder=\"Please input SQL\"\n            inputEventHandler={onInput}\n          />\n        </div>\n        <div className=\"display-area\">\n          <div className=\"formatted-area\">\n            <div className=\"button-area\">\n              <div className=\"button-wrapper\">\n                <SimpleButton\n                  buttonClass=\"is-info is-rounded is-fullwidth has-tooltip-info\"\n                  buttonText=\"copy\"\n                  onClickEventHandler={copyFormattedSql}\n                  tooltip=\"Copy the formatted SQL to the clipboard\"\n                />\n              </div>\n              <div className=\"button-wrapper\">\n                <SimpleButton\n                  buttonClass=\"is-info is-rounded is-fullwidth has-tooltip-info\"\n                  buttonText=\"<<\"\n                  onClickEventHandler={updateInputByFormatted}\n                  tooltip=\"Update the input area by the formatted SQL\"\n                />\n              </div>\n            </div>\n            <div className=\"text-area\">\n              <ReadOnlyTextBox\n                placeholder=\"This area shows formatted input SQL\"\n                formattedSql={formattedSql}\n              />\n            </div>\n          </div>\n          <div className=\"minified-area\">\n            <div className=\"button-area\">\n              <SimpleButton\n                buttonClass=\"is-info is-rounded is-fullwidth has-tooltip-info\"\n                buttonText=\"copy\"\n                onClickEventHandler={copyMinifiedSql}\n                tooltip=\"Copy the minified SQL to the clipboard\"\n              />\n            </div>\n            <div className=\"text-area\">\n              <ReadOnlyTextBox\n                placeholder=\"This area shows minified input SQL\"\n                formattedSql={minifiedSql}\n                wrap=\"off\"\n                class=\"no-scroll\"\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction copyTextToClipBoard(target: string) {\n  const divTemp = document.createElement('div');\n  divTemp.appendChild(document.createElement('pre')).textContent = target;\n\n  document.body.appendChild(divTemp);\n  const selection = document.getSelection();\n  if (selection != null) {\n    selection.selectAllChildren(divTemp);\n  }\n  document.execCommand('copy');\n\n  document.body.removeChild(divTemp);\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL!, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    {process.env.REACT_APP_BASE_URL != undefined && (\n      <BrowserRouter basename={process.env.REACT_APP_BASE_URL}></BrowserRouter>\n    )}\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}